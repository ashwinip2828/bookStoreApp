--hume har project mai yah lagega user ka login karana,use authenticate karana resigter karana 
--iske liye hum sab se pahle user.model.js nam se Backend ke modal folder mai file banayenge
--user.model.js
--ab isme hum hamae user ka schema define karayenge
--iske liye hum posrman pe jake new collection karenge aur uska nam rakhenge USERS
--ab isme hum new request add 
-GET ki jagah POST select
 karenge
--click body -> click row
--ab hum postman pe data likheng

--ab hum Schema define karenge, user.model.js mai
import mongoose from "mongoose";

const userSchema=mongoose.Schema({
    fullname:{
        type:String,
        required:true
    },
    email:{
        type:String,
        required:true,
        unique:true
    },
    password:{
        type:String,
        required:true
    },
    
})
const User=mongoose.model("User",userSchema);
export default User;

--ab user ke liye controller define karenge
--controller ke folder pe jake user.controller.js file bana denge
--controller mai hum function create karate hai
--function banane keliye hume dta milta hai body se
import User from "../model/user.model.js";
import bcryptjs from "bcryptjs";

export const signup= async (req,res)=>{
    try {
       const {fullname,email,password}=req.body;
       const user=await User.findOne({email})
       if(user){
        return res.status(400).json({message:"User alredy exists"})
       }
    //    bcrypt password
    const hashPassword=await bcryptjs.hash(password,10)
       const createdUser=new User({
        fullname: fullname,
        email:email,
        password:hashPassword,
       });
       await createdUser.save()
       res.status(201).json({message:"User created successfully"});
    } catch (error) {
        console.log("Error: " + error.message);
        res.status(500).json({message:"Internal server error"});
    }
};


--ab user ke liye route banayenge
--routes folder  mai user.route.js file banayenge
import express from 'express';
import { signup } from '../controller/user.controller.js';
const router=express.Router();

router.post("/signup",signup)

export default router;


--ab index.js pe jao
import userRoute from "./routes/user.route.js"
-ab iska bhi route define karenge
app.use("/user",userRoute);

--ab API ko test karenge
--postman pe jayenge
--new request name rakhenge Signup
--get book ki url copy karke book ki jagah user likhenge
http://localhost:4001/user/signup

--hamare mongo db ke database mai hume password dikh raha hai to iske liye hum 
decript ka use karenge taki vah hume na dikhe
--iske liye backend mai decript ko install karenge
>npm i bcryptjs
--install hone ke bad hum ise controller use karenge
--save karke fir se server ko start karenge
--postman pe jake naya user send karo
--mongodb pe aake database mai check karo

--index.js for signup 
import express from "express";
import mongoose from "mongoose";
import dotenv from "dotenv";
import cors from "cors";


import bookRoute from "./routes/book.route.js"
import userRoute from "./routes/user.route.js"

const app = express(dotenv);
app.use(cors());
app.use(express.json());

dotenv.config();

const PORT = process.env.PORT || 4000; 
const URI = process.env.mongoDBURI

//connect to mongoDB 
// yeh sirf local mongodb ke liye dena padata hai
try {
  mongoose.connect(URI,{
    // yeh sirf local mongodb ke liye dena padata hai
    useNewUrlParser: true,
    useUnifiedTopology: true
  });
  console.log("connected to mongodb");
} catch (error) {
  console.log("Error:", error );
}

//define routes
app.use("/book",bookRoute);
app.use("/user",userRoute);

app.listen(PORT, () => {
  console.log(`Example app listening on port ${PORT}`)
});

------------------------------------------------------------------------
--ab hum login ke liye backend ka code likhenge
--user.controller.js mai hi login ka code likhenge
export const login=async(req,res)=>{
    try {
        const {email,password} =req.body;
        const user = await User.findOne({email});
        const isMatch=bcryptjs.compare(password,user.password)
        if(!user || !isMatch){ 
            return res.status(400).json({message:"Invalid username or password "});
        }
        else{
            res.status(200).json({message:"Login succesful",user:{
                _id:user._id,
                fullname:user.fullname,
                email:user.email
            }})
        }
    } catch (error) {
        console.log("Error: "+error.message)
        res.status(500).json({message:"Internal server error"})
    }
}


--ab uska route create karenge user.route.js mai
router.post("/login",login)

--ab hum postman pe jayenge
--ek aur add request banayenge 
--uska nam rakhenge Login 
--select POST  
--click body
--select raw 
--{
"email":"vikram1@gmail.com",
"password":"123456"

}

--{
    "message": "Login succesful",
    "user": {
        "_id": "662a31c83e4b7c7b522c6366",
        "fullname": "vikram",
        "email": "vikram1@gmail.com"
    }
}




